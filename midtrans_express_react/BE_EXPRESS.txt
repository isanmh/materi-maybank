Project: 
https://github.com/isanmh/be_toko 

# cara install prisma :
- npm install @prisma/cli
- npx prisma init

# cara install pnpm :
- npm install -g pnpm

# install nodemodules :
- pnpm install
atau 
- npm install

# untuk migrate : 
- npx prisma migrate dev --name init
- pnpm prisma migrate dev --name init
- npx prisma generate

# Setting env & database di .env :
DATABASE_URL="mysql://root:password@localhost:3306/db_toko"

# Buat database di mysql 
- upgrage mysql:
mysql_upgrade

# cara menjalankan server :
- pnpm run dev

- Buka doc midtrans 
- Masuk ke features/transactions/index.js (fungsi createTransaction)
# import const :

# untuk midtrans, midtrains server (key btoa = base64 encode)
const authString = btoa(`${MIDTRANS_SERVER_KEY}:`);

- tambahkan key di utils/constans.js :
# Tambahkan Import diatas :
import {
  MIDTRANS_SERVER_KEY,
  FRONT_END_URL,
  MIDTRANS_APP_URL,
} from "../../utils/constant.js";

# midtrans server key
export const MIDTRANS_SERVER_KEY = process.env.MIDTRANS_SERVER_KEY;

# front end url & midtrans App (sebelum melakukan Promise.all)
export const MIDTRANS_APP_URL = process.env.MIDTRANS_APP_URL;
export const FRONT_END_URL = process.env.FRONT_END_URL;

- tambah payload di features/transactions/index.js :
# payload untuk midtrans
const payload = {
  transaction_details: {
    order_id: transaction_id,
    gross_amount,
  },
  item_details: productsFromDB.map((product) => ({
    id: product.id,
    price: product.price,
    quantity: product.quantity,
    name: product.name,
  })),
  customer_details: {
    first_name: customer_name,
    email: customer_email,
  },
  callbacks: {
    finish: `${FRONT_END_URL}/order-status?transaction_id=${transaction_id}`,
    error: `${FRONT_END_URL}/order-status?transaction_id=${transaction_id}`,
    pending: `${FRONT_END_URL}/order-status?transaction_id=${transaction_id}`,
  },
};


- api call ke midtrans di features/transactions/index.js :
# api call ke midtrans
const response = await fetch(`${MIDTRANS_APP_URL}/snap/v1/transactions`, {
  method: "POST",
  headers: {
    Authorization: `Basic ${authString}`,
    "Content-Type": "application/json",
  },
  body: JSON.stringify(payload),
});

const data = await response.json();

if (response.status !== 201) {
  return res.status(500).json({
    status: "error",
    message: "Failed to create transaction",
  });
}

- ganti object ketika response berhasil (Promise.all & res.json):
  # snap_token: null,
  snap_token: data.token,
  # snap_redirect_url: null,
  snap_redirect_url: data.redirect_url,

=============WEB HOOK================
- membuat webhook di midtrans :
- route :
// webhook
router.post("/transactions/notification", catchAsync(trxNotif));


- tambhkan fungsi baru di features/transactions/index.js
# membuat fungsi baru untuk Weebhook (updateStatusMidtrans, trxNotif):
const updateStatusMidtrans = async (transaction_id, data) => {
  const hash = crypto
    .createHash("sha512")
    .update(
      `${transaction_id}${data.status_code}${data.gross_amount}${MIDTRANS_SERVER_KEY}`
    )
    .digest("hex");

  if (data.signature_key !== hash) {
    return {
      status: "error",
      message: "Invalid Signature Key",
    };
  }

  let responseData = null;
  let transactionStatus = data.transaction_status;
  let fraudStatus = data.fraud_status;

  if (transactionStatus == "capture") {
    if (fraudStatus == "accept") {
      const transaction = await transactionService.updateTransactionStatus({
        transaction_id,
        status: PAID,
        payment_method: data.payment_type,
      });
      responseData = transaction;
    }
  } else if (transactionStatus == "settlement") {
    const transaction = await transactionService.updateTransactionStatus({
      transaction_id,
      status: PAID,
      payment_method: data.payment_type,
    });
    responseData = transaction;
  } else if (
    transactionStatus == "cancel" ||
    transactionStatus == "deny" ||
    transactionStatus == "expire"
  ) {
    const transaction = await transactionService.updateTransactionStatus({
      transaction_id,
      status: CANCELED,
      payment_method: data.payment_type,
    });
    responseData = transaction;
  } else if (transactionStatus == "pending") {
    const transaction = await transactionService.updateTransactionStatus({
      transaction_id,
      status: PENDING_PAYMENT,
      payment_method: data.payment_type,
    });
    responseData = transaction;
  }

  return {
    status: "success",
    data: responseData,
  };
};

export const trxNotif = async (req, res) => {
  const data = req.body;

  transactionService
    .getTransactionById({
      transaction_id: data.order_id,
    })
    .then((transaction) => {
      if (transaction) {
        updateStatusMidtrans(transaction.id, data).then((result) => {
          console.log("result", result);
        });
      }
    });

  res.status(200).json({
    status: "success",
    message: "OK",
  });
};

- setting routes/index.js :
# webhook
router.post("/transactions/notification", catchAsync(trxNotif));

- setting notification (midtrains cloud) untuk webhook website hrs dideploy terlebih dahulu :
# sandbox > integration > notification settings > add notification > url :
# enpoint webhook : 
{domain}/transactions/notification 
